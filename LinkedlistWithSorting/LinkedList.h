
/*
*
*	This file is generated by N. Alperen Pulur
*	26/04/2015     -     Istanbul
*	for questions related with source code : alperenp@sabanciuniv.edu
*
*	This is a singly Linkedlist implementation
*	The list nodes can contain template class type elements
*
*	Also some of well-known sorting algorithms are implemented within
*	the linkedlist structure
*
*/
#ifndef _LINKEDLISTTEMPLATE_H
#define _LINKEDLISTTEMPLATE_H

template <class AlpoType>
struct node
{
	AlpoType info;
	node * next;

	node()
	{		
		next = NULL;
	}
	node(AlpoType a)
	{
		info = a;
		next = NULL;
	}

	node(const AlpoType & a, node* link)
	{
		info = a;
		next = link;
	}
};


template<class AlpoType>
class LinkedList
{
	private:
		node<AlpoType> * head;
		node<AlpoType> * rear;
		node<AlpoType> * cloneList() const;
		int length();
		void UpdateRear();
		void Swap(node<AlpoType> * a, node<AlpoType> * b);
		void addInOrder(AlpoType item);						// used in insertionSort
		void updateShell(node<AlpoType> * leftiterator, int sortingCount);	// used in shellSort
		node<AlpoType> * findMinNode(node<AlpoType> * startpoint);		// used in selectionSort
		void merge(node<AlpoType> * lefthead, node<AlpoType> * righthead);	// used in mergeSort

	public:
		LinkedList();								// Default Constructor
		LinkedList(const LinkedList & list);					// Deep Copy Constructor
		~LinkedList();								// Destructor
		void Clear();
		void Print();
		void addToBeginning(AlpoType item);
		void addToEnd(AlpoType item);

		// Sort Algorithms
		void bubbleSort();
		void insertionSort();
		void shellSort();
		void selectionSort();
		void mergeSort();
		void quickSort();
};

#endif
