/*
*
*	This file is generated by N. Alperen Pulur
*	20/08/2015     -     Istanbul
*	for questions related with source code : alperenp@sabanciuniv.edu
*
*	This is a basic Stack implementation
*	The Stack nodes contain template class type elements
*
*
*/

#ifndef _TemplateStack_H
#define _TemplateStack_H

template <class AlpoType>
struct node
{
	AlpoType item;
	node* next;
	node() :next(NULL)
	{}
	node(AlpoType i, node* n = NULL) :item(i), next(n)
	{}
};

template <class AlpoType>
class TemplateStack
{
private:
	node<AlpoType>* top;							//pointer for top value
	int size;										//size of Stack
	node<AlpoType>* cloneStack() const;				//Deep copy of current Stack
	void clear();									//deletes all elements from Stack
public:
	TemplateStack();								//Default constructor
	TemplateStack(const TemplateStack & stack);		//Deep copy constructor
	~TemplateStack();								//Destructor
	void push(AlpoType a);							//Stack push
	AlpoType pop();									//Stack pop
	int getSize() const;							//Stack size
	bool isEmpty() const;
};


#endif // !TemplateStack
